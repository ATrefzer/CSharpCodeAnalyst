IMPROVEMENTS
---------------------

- Replace Guid with symbol key. Does it have an impact on memory or performance?
  Having the symbol key would allow synchronization with a project in the future.

- Consider adding the access modifiers. We could get rid of all private members.

- Search should filter external code.


UNHANDLED CASES
---------------------

- Attributes are caught at the class or method level. Not for the parameters like [CallerMemberName]
  => Not useful enough to implement.
  
- Two projects with the same name (discard one, breaks the symbol key mechanics)

BUGS 
---------------------

- Key down gets lost. Not even called on the MainWindow!?

- Anonymous methods like PdsOnElementCreated, Lambdas. Calls are attributed to the defining method.
  However, the execution may be elsewhere. I could mark such calls, and while ok for the dependency graph, it is wrong when following call chains.
  Solution: Switch to uses but do not add Calls Relationships inside. Maybe we can store this state in MethodBodyWalker
  The method that contains the lambda does not necessarily call it. This would require deeper analysis.
 
- Missing Access to record fields 
  CodeParser.CodeParser.Analysis.Cycles.CycleFinder.FindCycleGroups -(Uses)-> CodeParser.CodeParser.Analysis.Shared.Scc.Vertices 
  CodeParser.CodeParser.Analysis.Cycles.CycleFinder.RemoveOrphanedDependencies -(Uses)-> CodeParser.CodeParser.Analysis.Shared.Scc.Vertices 
  CodeParser.CodeParser.Analysis.Cycles.CycleFinder.FindCycleGroups -(Uses)-> CodeParser.CodeParser.Analysis.Shared.Scc.Vertices 


MISSING TEST CASES
---------------------


CLARIFY
---------------------

- What was the reason for the normalized ctor?
