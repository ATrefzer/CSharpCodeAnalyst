IMPROVEMENTS
---------------------

Events with different signatures?

In the derivative find only first implements. However, this issue is not a problem with Find...

Relationship between methods and events. Duplicates? Different strategy?


 private IEventSymbol? GetImplementedInterfaceEvent(IEventSymbol eventSymbol)
    {
        var containingType = eventSymbol.ContainingType;

        // TODO are base interfaces included.
        foreach (var @interface in containingType.AllInterfaces)




  // calls: m1 (source) -> calls -> m2 (element, target)
            // overrides m1 -> overrides -> m2 (element, target)
            var callsToOwnBase = calls.Where(c => allImplementsAndOverrides.Any(r => 
                r.SourceId == c.SourceId &&
                r.TargetId == element.Id));

            calls = calls.Except(callsToOwnBase).ToArray();
            foundRelationships.UnionWith(calls);
            var callSources = calls.Select(d => _codeGraph.Nodes[d.SourceId]).ToHashSet();
            foundElements.UnionWith(callSources);




- Anonymous methods like PdsOnElementCreated, lambdas

- Highlighting aggregated edges takes too long. If quick help is not visible then skip.
- Performance in general

- Replace Guid with symbol key. Does it have an impact on memory or performance?
  Having the symbol key would allow synchronization with a project in the future.


UNHANDLED CASES
---------------------

- Attributes are caught at class or method level. Not for the parameters like [CallerMemberName]
- Two projects with same name

BUGS
---------------------

MISSING TEST CASES
---------------------
